package test;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class DeVillChain_sol_deVillChain extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_GETSOURCECOUNT = "getSourceCount";

    public static final String FUNC_GETADDITIONALSOURCETIMESTAMP = "getAdditionalSourceTimestamp";

    public static final String FUNC_GETTIMESTAMP = "getTimestamp";

    public static final String FUNC_ADDUSER = "addUser";

    public static final String FUNC_GETADDITIONALSOURCEHOF = "getAdditionalSourceHoF";

    public static final String FUNC_CLOSECONTRACT = "closeContract";

    public static final String FUNC_GETURL = "getUrl";

    public static final String FUNC_ADDSOURCE = "addSource";

    public static final String FUNC_GETADDITIONALSOURCEAURL = "getAdditionalSourceAUrl";

    public static final String FUNC_GETHASHOFFILE = "getHashofFile";

    public static final String FUNC_GETUSER = "getUser";

    public static final String FUNC_STRING_TOBYTES = "string_tobytes";

    public static final String FUNC_COMPARESTRINGS = "compareStrings";

    public static final String FUNC_ADDADDITIONALSOURCELATEST = "addAdditionalSourceLatest";

    public static final String FUNC_GETSOURCE = "getSource";

    public static final String FUNC_GETHASH = "getHash";

    public static final String FUNC_GETADDITIONALSOURCE = "getAdditionalSource";

    protected DeVillChain_sol_deVillChain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DeVillChain_sol_deVillChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<BigInteger> getSourceCount(String a, BigInteger i) {
        final Function function = new Function(FUNC_GETSOURCECOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(a), 
                new org.web3j.abi.datatypes.generated.Uint256(i)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getAdditionalSourceTimestamp(String a, BigInteger i, BigInteger j) {
        final Function function = new Function(FUNC_GETADDITIONALSOURCETIMESTAMP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(a), 
                new org.web3j.abi.datatypes.generated.Uint256(i), 
                new org.web3j.abi.datatypes.generated.Uint256(j)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getTimestamp(String a, BigInteger i) {
        final Function function = new Function(FUNC_GETTIMESTAMP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(a), 
                new org.web3j.abi.datatypes.generated.Uint256(i)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addUser(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_ADDUSER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<String> getAdditionalSourceHoF(String a, BigInteger i, BigInteger j) {
        final Function function = new Function(FUNC_GETADDITIONALSOURCEHOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(a), 
                new org.web3j.abi.datatypes.generated.Uint256(i), 
                new org.web3j.abi.datatypes.generated.Uint256(j)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> closeContract() {
        final Function function = new Function(
                FUNC_CLOSECONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getUrl(String a, BigInteger i) {
        final Function function = new Function(FUNC_GETURL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(a), 
                new org.web3j.abi.datatypes.generated.Uint256(i)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> addSource(String _th, String _hof, BigInteger _ts, String _ou, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_ADDSOURCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_th), 
                new org.web3j.abi.datatypes.Utf8String(_hof), 
                new org.web3j.abi.datatypes.generated.Uint64(_ts), 
                new org.web3j.abi.datatypes.Utf8String(_ou)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<String> getAdditionalSourceAUrl(String a, BigInteger i, BigInteger j) {
        final Function function = new Function(FUNC_GETADDITIONALSOURCEAURL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(a), 
                new org.web3j.abi.datatypes.generated.Uint256(i), 
                new org.web3j.abi.datatypes.generated.Uint256(j)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getHashofFile(String a, BigInteger i) {
        final Function function = new Function(FUNC_GETHASHOFFILE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(a), 
                new org.web3j.abi.datatypes.generated.Uint256(i)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> getUser(BigInteger i, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_GETUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(i)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<byte[]> string_tobytes(String s) {
        final Function function = new Function(FUNC_STRING_TOBYTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(s)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<Boolean> compareStrings(String a, String b) {
        final Function function = new Function(FUNC_COMPARESTRINGS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(a), 
                new org.web3j.abi.datatypes.Utf8String(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> addAdditionalSourceLatest(String _hof, BigInteger _ts, String _au, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_ADDADDITIONALSOURCELATEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_hof), 
                new org.web3j.abi.datatypes.generated.Uint64(_ts), 
                new org.web3j.abi.datatypes.Utf8String(_au)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Tuple5<String, String, BigInteger, String, BigInteger>> getSource(String a, BigInteger i) {
        final Function function = new Function(FUNC_GETSOURCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(a), 
                new org.web3j.abi.datatypes.generated.Uint256(i)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<String, String, BigInteger, String, BigInteger>>(
                new Callable<Tuple5<String, String, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<String> getHash(String a, BigInteger i) {
        final Function function = new Function(FUNC_GETHASH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(a), 
                new org.web3j.abi.datatypes.generated.Uint256(i)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple3<String, BigInteger, String>> getAdditionalSource(String a, BigInteger i, BigInteger j) {
        final Function function = new Function(FUNC_GETADDITIONALSOURCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(a), 
                new org.web3j.abi.datatypes.generated.Uint256(i), 
                new org.web3j.abi.datatypes.generated.Uint256(j)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple3<String, BigInteger, String>>(
                new Callable<Tuple3<String, BigInteger, String>>() {
                    @Override
                    public Tuple3<String, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, String>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public static RemoteCall<DeVillChain_sol_deVillChain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(DeVillChain_sol_deVillChain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static RemoteCall<DeVillChain_sol_deVillChain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(DeVillChain_sol_deVillChain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static DeVillChain_sol_deVillChain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DeVillChain_sol_deVillChain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DeVillChain_sol_deVillChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DeVillChain_sol_deVillChain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
